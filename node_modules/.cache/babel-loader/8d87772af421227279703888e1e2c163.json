{"ast":null,"code":"'use strict'; // hoisted due to circular dependency on command.\n\nmodule.exports = argsert;\n\nvar command = require('./command')();\n\nvar YError = require('./yerror');\n\nvar positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth'];\n\nfunction argsert(expected, callerArguments, length) {\n  // TODO: should this eventually raise an exception.\n  try {\n    // preface the argument description with \"cmd\", so\n    // that we can run it through yargs' command parser.\n    var position = 0;\n    var parsed = {\n      demanded: [],\n      optional: []\n    };\n\n    if (typeof expected === 'object') {\n      length = callerArguments;\n      callerArguments = expected;\n    } else {\n      parsed = command.parseCommand(\"cmd \".concat(expected));\n    }\n\n    var args = [].slice.call(callerArguments);\n\n    while (args.length && args[args.length - 1] === undefined) {\n      args.pop();\n    }\n\n    length = length || args.length;\n\n    if (length < parsed.demanded.length) {\n      throw new YError(\"Not enough arguments provided. Expected \".concat(parsed.demanded.length, \" but received \").concat(args.length, \".\"));\n    }\n\n    var totalCommands = parsed.demanded.length + parsed.optional.length;\n\n    if (length > totalCommands) {\n      throw new YError(\"Too many arguments provided. Expected max \".concat(totalCommands, \" but received \").concat(length, \".\"));\n    }\n\n    parsed.demanded.forEach(function (demanded) {\n      var arg = args.shift();\n      var observedType = guessType(arg);\n      var matchingTypes = demanded.cmd.filter(function (type) {\n        return type === observedType || type === '*';\n      });\n      if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position, false);\n      position += 1;\n    });\n    parsed.optional.forEach(function (optional) {\n      if (args.length === 0) return;\n      var arg = args.shift();\n      var observedType = guessType(arg);\n      var matchingTypes = optional.cmd.filter(function (type) {\n        return type === observedType || type === '*';\n      });\n      if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position, true);\n      position += 1;\n    });\n  } catch (err) {\n    console.warn(err.stack);\n  }\n}\n\nfunction guessType(arg) {\n  if (Array.isArray(arg)) {\n    return 'array';\n  } else if (arg === null) {\n    return 'null';\n  }\n\n  return typeof arg;\n}\n\nfunction argumentTypeError(observedType, allowedTypes, position, optional) {\n  throw new YError(\"Invalid \".concat(positionName[position] || 'manyith', \" argument. Expected \").concat(allowedTypes.join(' or '), \" but received \").concat(observedType, \".\"));\n}","map":{"version":3,"sources":["/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/yargs/lib/argsert.js"],"names":["module","exports","argsert","command","require","YError","positionName","expected","callerArguments","length","position","parsed","demanded","optional","parseCommand","args","slice","call","undefined","pop","totalCommands","forEach","arg","shift","observedType","guessType","matchingTypes","cmd","filter","type","argumentTypeError","err","console","warn","stack","Array","isArray","allowedTypes","join"],"mappings":"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","sourcesContent":["'use strict'\n\n// hoisted due to circular dependency on command.\nmodule.exports = argsert\nconst command = require('./command')()\nconst YError = require('./yerror')\n\nconst positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth']\nfunction argsert (expected, callerArguments, length) {\n  // TODO: should this eventually raise an exception.\n  try {\n    // preface the argument description with \"cmd\", so\n    // that we can run it through yargs' command parser.\n    let position = 0\n    let parsed = { demanded: [], optional: [] }\n    if (typeof expected === 'object') {\n      length = callerArguments\n      callerArguments = expected\n    } else {\n      parsed = command.parseCommand(`cmd ${expected}`)\n    }\n    const args = [].slice.call(callerArguments)\n\n    while (args.length && args[args.length - 1] === undefined) args.pop()\n    length = length || args.length\n\n    if (length < parsed.demanded.length) {\n      throw new YError(`Not enough arguments provided. Expected ${parsed.demanded.length} but received ${args.length}.`)\n    }\n\n    const totalCommands = parsed.demanded.length + parsed.optional.length\n    if (length > totalCommands) {\n      throw new YError(`Too many arguments provided. Expected max ${totalCommands} but received ${length}.`)\n    }\n\n    parsed.demanded.forEach((demanded) => {\n      const arg = args.shift()\n      const observedType = guessType(arg)\n      const matchingTypes = demanded.cmd.filter(type => type === observedType || type === '*')\n      if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position, false)\n      position += 1\n    })\n\n    parsed.optional.forEach((optional) => {\n      if (args.length === 0) return\n      const arg = args.shift()\n      const observedType = guessType(arg)\n      const matchingTypes = optional.cmd.filter(type => type === observedType || type === '*')\n      if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position, true)\n      position += 1\n    })\n  } catch (err) {\n    console.warn(err.stack)\n  }\n}\n\nfunction guessType (arg) {\n  if (Array.isArray(arg)) {\n    return 'array'\n  } else if (arg === null) {\n    return 'null'\n  }\n  return typeof arg\n}\n\nfunction argumentTypeError (observedType, allowedTypes, position, optional) {\n  throw new YError(`Invalid ${positionName[position] || 'manyith'} argument. Expected ${allowedTypes.join(' or ')} but received ${observedType}.`)\n}\n"]},"metadata":{},"sourceType":"script"}