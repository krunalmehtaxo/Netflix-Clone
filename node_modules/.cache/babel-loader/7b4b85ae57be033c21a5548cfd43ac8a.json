{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar stringWidth = require('string-width');\n\nvar stripAnsi = require('strip-ansi');\n\nvar ansiStyles = require('ansi-styles');\n\nvar ESCAPES = new Set([\"\\x1B\", \"\\x9B\"]);\nvar END_CODE = 39;\n\nvar wrapAnsi = function wrapAnsi(code) {\n  return \"\".concat(ESCAPES.values().next().value, \"[\").concat(code, \"m\");\n}; // Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\n\n\nvar wordLengths = function wordLengths(string) {\n  return string.split(' ').map(function (character) {\n    return stringWidth(character);\n  });\n}; // Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\n\n\nvar wrapWord = function wrapWord(rows, word, columns) {\n  var characters = _toConsumableArray(word);\n\n  var insideEscape = false;\n  var visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n\n  var _iterator = _createForOfIteratorHelper(characters.entries()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          index = _step$value[0],\n          character = _step$value[1];\n\n      var characterLength = stringWidth(character);\n\n      if (visible + characterLength <= columns) {\n        rows[rows.length - 1] += character;\n      } else {\n        rows.push(character);\n        visible = 0;\n      }\n\n      if (ESCAPES.has(character)) {\n        insideEscape = true;\n      } else if (insideEscape && character === 'm') {\n        insideEscape = false;\n        continue;\n      }\n\n      if (insideEscape) {\n        continue;\n      }\n\n      visible += characterLength;\n\n      if (visible === columns && index < characters.length - 1) {\n        rows.push('');\n        visible = 0;\n      }\n    } // It's possible that the last row we copy over is only\n    // ansi escape characters, handle this edge-case\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n    rows[rows.length - 2] += rows.pop();\n  }\n}; // Trims spaces from a string ignoring invisible sequences\n\n\nvar stringVisibleTrimSpacesRight = function stringVisibleTrimSpacesRight(str) {\n  var words = str.split(' ');\n  var last = words.length;\n\n  while (last > 0) {\n    if (stringWidth(words[last - 1]) > 0) {\n      break;\n    }\n\n    last--;\n  }\n\n  if (last === words.length) {\n    return str;\n  }\n\n  return words.slice(0, last).join(' ') + words.slice(last).join('');\n}; // The wrap-ansi module can be invoked\n// in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more\n// than columns characters\n//\n// 'soft' allows long words to expand past the column length\n\n\nvar exec = function exec(string, columns) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (options.trim !== false && string.trim() === '') {\n    return '';\n  }\n\n  var pre = '';\n  var ret = '';\n  var escapeCode;\n  var lengths = wordLengths(string);\n  var rows = [''];\n\n  var _iterator2 = _createForOfIteratorHelper(string.split(' ').entries()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n          index = _step2$value[0],\n          word = _step2$value[1];\n\n      if (options.trim !== false) {\n        rows[rows.length - 1] = rows[rows.length - 1].trimLeft();\n      }\n\n      var rowLength = stringWidth(rows[rows.length - 1]);\n\n      if (index !== 0) {\n        if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n          // If we start with a new word but the current row length equals the length of the columns, add a new row\n          rows.push('');\n          rowLength = 0;\n        }\n\n        if (rowLength > 0 || options.trim === false) {\n          rows[rows.length - 1] += ' ';\n          rowLength++;\n        }\n      } // In 'hard' wrap mode, the length of a line is\n      // never allowed to extend past 'columns'\n\n\n      if (options.hard && lengths[index] > columns) {\n        var remainingColumns = columns - rowLength;\n        var breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n        var breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n\n        if (breaksStartingNextLine < breaksStartingThisLine) {\n          rows.push('');\n        }\n\n        wrapWord(rows, word, columns);\n        continue;\n      }\n\n      if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n        if (options.wordWrap === false && rowLength < columns) {\n          wrapWord(rows, word, columns);\n          continue;\n        }\n\n        rows.push('');\n      }\n\n      if (rowLength + lengths[index] > columns && options.wordWrap === false) {\n        wrapWord(rows, word, columns);\n        continue;\n      }\n\n      rows[rows.length - 1] += word;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (options.trim !== false) {\n    rows = rows.map(stringVisibleTrimSpacesRight);\n  }\n\n  pre = rows.join('\\n');\n\n  var _iterator3 = _createForOfIteratorHelper(_toConsumableArray(pre).entries()),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          _index = _step3$value[0],\n          character = _step3$value[1];\n\n      ret += character;\n\n      if (ESCAPES.has(character)) {\n        var _code = parseFloat(/\\d[^m]*/.exec(pre.slice(_index, _index + 4)));\n\n        escapeCode = _code === END_CODE ? null : _code;\n      }\n\n      var code = ansiStyles.codes.get(Number(escapeCode));\n\n      if (escapeCode && code) {\n        if (pre[_index + 1] === '\\n') {\n          ret += wrapAnsi(code);\n        } else if (character === '\\n') {\n          ret += wrapAnsi(escapeCode);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return ret;\n}; // For each newline, invoke the method separately\n\n\nmodule.exports = function (string, columns, options) {\n  return String(string).normalize().split('\\n').map(function (line) {\n    return exec(line, columns, options);\n  }).join('\\n');\n};","map":{"version":3,"sources":["/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/wrap-ansi/index.js"],"names":["stringWidth","require","stripAnsi","ansiStyles","ESCAPES","Set","END_CODE","wrapAnsi","code","values","next","value","wordLengths","string","split","map","character","wrapWord","rows","word","columns","characters","insideEscape","visible","length","entries","index","characterLength","push","has","pop","stringVisibleTrimSpacesRight","str","words","last","slice","join","exec","options","trim","pre","ret","escapeCode","lengths","trimLeft","rowLength","wordWrap","hard","remainingColumns","breaksStartingThisLine","Math","floor","breaksStartingNextLine","parseFloat","codes","get","Number","module","exports","String","normalize","line"],"mappings":"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","sourcesContent":["'use strict';\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\nconst ansiStyles = require('ansi-styles');\n\nconst ESCAPES = new Set([\n\t'\\u001B',\n\t'\\u009B'\n]);\n\nconst END_CODE = 39;\n\nconst wrapAnsi = code => `${ESCAPES.values().next().value}[${code}m`;\n\n// Calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes\nconst wordLengths = string => string.split(' ').map(character => stringWidth(character));\n\n// Wrap a long word across multiple rows\n// Ansi escape codes do not count towards length\nconst wrapWord = (rows, word, columns) => {\n\tconst characters = [...word];\n\n\tlet insideEscape = false;\n\tlet visible = stringWidth(stripAnsi(rows[rows.length - 1]));\n\n\tfor (const [index, character] of characters.entries()) {\n\t\tconst characterLength = stringWidth(character);\n\n\t\tif (visible + characterLength <= columns) {\n\t\t\trows[rows.length - 1] += character;\n\t\t} else {\n\t\t\trows.push(character);\n\t\t\tvisible = 0;\n\t\t}\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tinsideEscape = true;\n\t\t} else if (insideEscape && character === 'm') {\n\t\t\tinsideEscape = false;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (insideEscape) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvisible += characterLength;\n\n\t\tif (visible === columns && index < characters.length - 1) {\n\t\t\trows.push('');\n\t\t\tvisible = 0;\n\t\t}\n\t}\n\n\t// It's possible that the last row we copy over is only\n\t// ansi escape characters, handle this edge-case\n\tif (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n\t\trows[rows.length - 2] += rows.pop();\n\t}\n};\n\n// Trims spaces from a string ignoring invisible sequences\nconst stringVisibleTrimSpacesRight = str => {\n\tconst words = str.split(' ');\n\tlet last = words.length;\n\n\twhile (last > 0) {\n\t\tif (stringWidth(words[last - 1]) > 0) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlast--;\n\t}\n\n\tif (last === words.length) {\n\t\treturn str;\n\t}\n\n\treturn words.slice(0, last).join(' ') + words.slice(last).join('');\n};\n\n// The wrap-ansi module can be invoked\n// in either 'hard' or 'soft' wrap mode\n//\n// 'hard' will never allow a string to take up more\n// than columns characters\n//\n// 'soft' allows long words to expand past the column length\nconst exec = (string, columns, options = {}) => {\n\tif (options.trim !== false && string.trim() === '') {\n\t\treturn '';\n\t}\n\n\tlet pre = '';\n\tlet ret = '';\n\tlet escapeCode;\n\n\tconst lengths = wordLengths(string);\n\tlet rows = [''];\n\n\tfor (const [index, word] of string.split(' ').entries()) {\n\t\tif (options.trim !== false) {\n\t\t\trows[rows.length - 1] = rows[rows.length - 1].trimLeft();\n\t\t}\n\n\t\tlet rowLength = stringWidth(rows[rows.length - 1]);\n\n\t\tif (index !== 0) {\n\t\t\tif (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {\n\t\t\t\t// If we start with a new word but the current row length equals the length of the columns, add a new row\n\t\t\t\trows.push('');\n\t\t\t\trowLength = 0;\n\t\t\t}\n\n\t\t\tif (rowLength > 0 || options.trim === false) {\n\t\t\t\trows[rows.length - 1] += ' ';\n\t\t\t\trowLength++;\n\t\t\t}\n\t\t}\n\n\t\t// In 'hard' wrap mode, the length of a line is\n\t\t// never allowed to extend past 'columns'\n\t\tif (options.hard && lengths[index] > columns) {\n\t\t\tconst remainingColumns = (columns - rowLength);\n\t\t\tconst breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);\n\t\t\tconst breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);\n\t\t\tif (breaksStartingNextLine < breaksStartingThisLine) {\n\t\t\t\trows.push('');\n\t\t\t}\n\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {\n\t\t\tif (options.wordWrap === false && rowLength < columns) {\n\t\t\t\twrapWord(rows, word, columns);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trows.push('');\n\t\t}\n\n\t\tif (rowLength + lengths[index] > columns && options.wordWrap === false) {\n\t\t\twrapWord(rows, word, columns);\n\t\t\tcontinue;\n\t\t}\n\n\t\trows[rows.length - 1] += word;\n\t}\n\n\tif (options.trim !== false) {\n\t\trows = rows.map(stringVisibleTrimSpacesRight);\n\t}\n\n\tpre = rows.join('\\n');\n\n\tfor (const [index, character] of [...pre].entries()) {\n\t\tret += character;\n\n\t\tif (ESCAPES.has(character)) {\n\t\t\tconst code = parseFloat(/\\d[^m]*/.exec(pre.slice(index, index + 4)));\n\t\t\tescapeCode = code === END_CODE ? null : code;\n\t\t}\n\n\t\tconst code = ansiStyles.codes.get(Number(escapeCode));\n\n\t\tif (escapeCode && code) {\n\t\t\tif (pre[index + 1] === '\\n') {\n\t\t\t\tret += wrapAnsi(code);\n\t\t\t} else if (character === '\\n') {\n\t\t\t\tret += wrapAnsi(escapeCode);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ret;\n};\n\n// For each newline, invoke the method separately\nmodule.exports = (string, columns, options) => {\n\treturn String(string)\n\t\t.normalize()\n\t\t.split('\\n')\n\t\t.map(line => exec(line, columns, options))\n\t\t.join('\\n');\n};\n"]},"metadata":{},"sourceType":"script"}