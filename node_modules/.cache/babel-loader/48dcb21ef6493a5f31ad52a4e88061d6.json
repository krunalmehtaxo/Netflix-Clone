{"ast":null,"code":"'use strict'; // hoisted due to circular dependency on command.\n\nvar _slicedToArray = require(\"/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nmodule.exports = {\n  applyMiddleware: applyMiddleware,\n  commandMiddlewareFactory: commandMiddlewareFactory,\n  globalMiddlewareFactory: globalMiddlewareFactory\n};\n\nvar isPromise = require('./is-promise');\n\nvar argsert = require('./argsert');\n\nfunction globalMiddlewareFactory(globalMiddleware, context) {\n  return function (callback) {\n    var applyBeforeValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    argsert('<array|function> [boolean]', [callback, applyBeforeValidation], arguments.length);\n\n    if (Array.isArray(callback)) {\n      for (var i = 0; i < callback.length; i++) {\n        if (typeof callback[i] !== 'function') {\n          throw Error('middleware must be a function');\n        }\n\n        callback[i].applyBeforeValidation = applyBeforeValidation;\n      }\n\n      Array.prototype.push.apply(globalMiddleware, callback);\n    } else if (typeof callback === 'function') {\n      callback.applyBeforeValidation = applyBeforeValidation;\n      globalMiddleware.push(callback);\n    }\n\n    return context;\n  };\n}\n\nfunction commandMiddlewareFactory(commandMiddleware) {\n  if (!commandMiddleware) return [];\n  return commandMiddleware.map(function (middleware) {\n    middleware.applyBeforeValidation = false;\n    return middleware;\n  });\n}\n\nfunction applyMiddleware(argv, yargs, middlewares, beforeValidation) {\n  var beforeValidationError = new Error('middleware cannot return a promise when applyBeforeValidation is true');\n  return middlewares.reduce(function (accumulation, middleware) {\n    if (middleware.applyBeforeValidation !== beforeValidation && !isPromise(accumulation)) {\n      return accumulation;\n    }\n\n    if (isPromise(accumulation)) {\n      return accumulation.then(function (initialObj) {\n        return Promise.all([initialObj, middleware(initialObj, yargs)]);\n      }).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            initialObj = _ref2[0],\n            middlewareObj = _ref2[1];\n\n        return Object.assign(initialObj, middlewareObj);\n      });\n    } else {\n      var result = middleware(argv, yargs);\n      if (beforeValidation && isPromise(result)) throw beforeValidationError;\n      return isPromise(result) ? result.then(function (middlewareObj) {\n        return Object.assign(accumulation, middlewareObj);\n      }) : Object.assign(accumulation, result);\n    }\n  }, argv);\n}","map":{"version":3,"sources":["/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/yargs/lib/middleware.js"],"names":["module","exports","applyMiddleware","commandMiddlewareFactory","globalMiddlewareFactory","isPromise","require","argsert","globalMiddleware","context","callback","applyBeforeValidation","arguments","length","Array","isArray","i","Error","prototype","push","apply","commandMiddleware","map","middleware","argv","yargs","middlewares","beforeValidation","beforeValidationError","reduce","accumulation","then","initialObj","Promise","all","middlewareObj","Object","assign","result"],"mappings":"AAAA,a,CAEA;;;;AACAA,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,eAAe,EAAfA,eADe;AAEfC,EAAAA,wBAAwB,EAAxBA,wBAFe;AAGfC,EAAAA,uBAAuB,EAAvBA;AAHe,CAAjB;;AAKA,IAAMC,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASF,uBAAT,CAAkCI,gBAAlC,EAAoDC,OAApD,EAA6D;AAC3D,SAAO,UAAUC,QAAV,EAAmD;AAAA,QAA/BC,qBAA+B,uEAAP,KAAO;AACxDJ,IAAAA,OAAO,CAAC,4BAAD,EAA+B,CAACG,QAAD,EAAWC,qBAAX,CAA/B,EAAkEC,SAAS,CAACC,MAA5E,CAAP;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcL,QAAd,CAAJ,EAA6B;AAC3B,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACG,MAA7B,EAAqCG,CAAC,EAAtC,EAA0C;AACxC,YAAI,OAAON,QAAQ,CAACM,CAAD,CAAf,KAAuB,UAA3B,EAAuC;AACrC,gBAAMC,KAAK,CAAC,+BAAD,CAAX;AACD;;AACDP,QAAAA,QAAQ,CAACM,CAAD,CAAR,CAAYL,qBAAZ,GAAoCA,qBAApC;AACD;;AACDG,MAAAA,KAAK,CAACI,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BZ,gBAA3B,EAA6CE,QAA7C;AACD,KARD,MAQO,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AACzCA,MAAAA,QAAQ,CAACC,qBAAT,GAAiCA,qBAAjC;AACAH,MAAAA,gBAAgB,CAACW,IAAjB,CAAsBT,QAAtB;AACD;;AACD,WAAOD,OAAP;AACD,GAfD;AAgBD;;AAED,SAASN,wBAAT,CAAmCkB,iBAAnC,EAAsD;AACpD,MAAI,CAACA,iBAAL,EAAwB,OAAO,EAAP;AACxB,SAAOA,iBAAiB,CAACC,GAAlB,CAAsB,UAAAC,UAAU,EAAI;AACzCA,IAAAA,UAAU,CAACZ,qBAAX,GAAmC,KAAnC;AACA,WAAOY,UAAP;AACD,GAHM,CAAP;AAID;;AAED,SAASrB,eAAT,CAA0BsB,IAA1B,EAAgCC,KAAhC,EAAuCC,WAAvC,EAAoDC,gBAApD,EAAsE;AACpE,MAAMC,qBAAqB,GAAG,IAAIX,KAAJ,CAAU,uEAAV,CAA9B;AACA,SAAOS,WAAW,CACfG,MADI,CACG,UAACC,YAAD,EAAeP,UAAf,EAA8B;AACpC,QAAIA,UAAU,CAACZ,qBAAX,KAAqCgB,gBAArC,IACA,CAACtB,SAAS,CAACyB,YAAD,CADd,EAC8B;AAC5B,aAAOA,YAAP;AACD;;AAED,QAAIzB,SAAS,CAACyB,YAAD,CAAb,EAA6B;AAC3B,aAAOA,YAAY,CAChBC,IADI,CACC,UAAAC,UAAU;AAAA,eACdC,OAAO,CAACC,GAAR,CAAY,CAACF,UAAD,EAAaT,UAAU,CAACS,UAAD,EAAaP,KAAb,CAAvB,CAAZ,CADc;AAAA,OADX,EAIJM,IAJI,CAIC;AAAA;AAAA,YAAEC,UAAF;AAAA,YAAcG,aAAd;;AAAA,eACJC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BG,aAA1B,CADI;AAAA,OAJD,CAAP;AAOD,KARD,MAQO;AACL,UAAMG,MAAM,GAAGf,UAAU,CAACC,IAAD,EAAOC,KAAP,CAAzB;AACA,UAAIE,gBAAgB,IAAItB,SAAS,CAACiC,MAAD,CAAjC,EAA2C,MAAMV,qBAAN;AAE3C,aAAOvB,SAAS,CAACiC,MAAD,CAAT,GACHA,MAAM,CAACP,IAAP,CAAY,UAAAI,aAAa;AAAA,eAAIC,MAAM,CAACC,MAAP,CAAcP,YAAd,EAA4BK,aAA5B,CAAJ;AAAA,OAAzB,CADG,GAEHC,MAAM,CAACC,MAAP,CAAcP,YAAd,EAA4BQ,MAA5B,CAFJ;AAGD;AACF,GAvBI,EAuBFd,IAvBE,CAAP;AAwBD","sourcesContent":["'use strict'\n\n// hoisted due to circular dependency on command.\nmodule.exports = {\n  applyMiddleware,\n  commandMiddlewareFactory,\n  globalMiddlewareFactory\n}\nconst isPromise = require('./is-promise')\nconst argsert = require('./argsert')\n\nfunction globalMiddlewareFactory (globalMiddleware, context) {\n  return function (callback, applyBeforeValidation = false) {\n    argsert('<array|function> [boolean]', [callback, applyBeforeValidation], arguments.length)\n    if (Array.isArray(callback)) {\n      for (let i = 0; i < callback.length; i++) {\n        if (typeof callback[i] !== 'function') {\n          throw Error('middleware must be a function')\n        }\n        callback[i].applyBeforeValidation = applyBeforeValidation\n      }\n      Array.prototype.push.apply(globalMiddleware, callback)\n    } else if (typeof callback === 'function') {\n      callback.applyBeforeValidation = applyBeforeValidation\n      globalMiddleware.push(callback)\n    }\n    return context\n  }\n}\n\nfunction commandMiddlewareFactory (commandMiddleware) {\n  if (!commandMiddleware) return []\n  return commandMiddleware.map(middleware => {\n    middleware.applyBeforeValidation = false\n    return middleware\n  })\n}\n\nfunction applyMiddleware (argv, yargs, middlewares, beforeValidation) {\n  const beforeValidationError = new Error('middleware cannot return a promise when applyBeforeValidation is true')\n  return middlewares\n    .reduce((accumulation, middleware) => {\n      if (middleware.applyBeforeValidation !== beforeValidation &&\n          !isPromise(accumulation)) {\n        return accumulation\n      }\n\n      if (isPromise(accumulation)) {\n        return accumulation\n          .then(initialObj =>\n            Promise.all([initialObj, middleware(initialObj, yargs)])\n          )\n          .then(([initialObj, middlewareObj]) =>\n            Object.assign(initialObj, middlewareObj)\n          )\n      } else {\n        const result = middleware(argv, yargs)\n        if (beforeValidation && isPromise(result)) throw beforeValidationError\n\n        return isPromise(result)\n          ? result.then(middlewareObj => Object.assign(accumulation, middlewareObj))\n          : Object.assign(accumulation, result)\n      }\n    }, argv)\n}\n"]},"metadata":{},"sourceType":"script"}