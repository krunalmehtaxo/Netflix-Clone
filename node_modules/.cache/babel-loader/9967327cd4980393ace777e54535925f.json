{"ast":null,"code":"'use strict';\n\nvar path = require('path'); // add bash completions to your\n//  yargs-powered applications.\n\n\nmodule.exports = function completion(yargs, usage, command) {\n  var self = {\n    completionKey: 'get-yargs-completions'\n  };\n  var zshShell = process.env.SHELL && process.env.SHELL.indexOf('zsh') !== -1; // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n\n  self.getCompletion = function getCompletion(args, done) {\n    var completions = [];\n    var current = args.length ? args[args.length - 1] : '';\n    var argv = yargs.parse(args, true);\n    var aliases = yargs.parsed.aliases;\n    var parentCommands = yargs.getContext().commands; // a custom completion function can be provided\n    // to completion().\n\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        var result = completionFunction(current, argv); // promise based completion function.\n\n        if (typeof result.then === 'function') {\n          return result.then(function (list) {\n            process.nextTick(function () {\n              done(list);\n            });\n          }).catch(function (err) {\n            process.nextTick(function () {\n              throw err;\n            });\n          });\n        } // synchronous completion function.\n\n\n        return done(result);\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, function (completions) {\n          done(completions);\n        });\n      }\n    }\n\n    var handlers = command.getCommandHandlers();\n\n    for (var i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        var builder = handlers[args[i]].builder;\n\n        if (typeof builder === 'function') {\n          var y = yargs.reset();\n          builder(y);\n          return y.argv;\n        }\n      }\n    }\n\n    if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current) {\n      usage.getCommands().forEach(function (usageCommand) {\n        var commandName = command.parseCommand(usageCommand[0]).cmd;\n\n        if (args.indexOf(commandName) === -1) {\n          if (!zshShell) {\n            completions.push(commandName);\n          } else {\n            var desc = usageCommand[1] || '';\n            completions.push(commandName.replace(/:/g, '\\\\:') + ':' + desc);\n          }\n        }\n      });\n    }\n\n    if (current.match(/^-/) || current === '' && completions.length === 0) {\n      var descs = usage.getDescriptions();\n      Object.keys(yargs.getOptions().key).forEach(function (key) {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        var keyAndAliases = [key].concat(aliases[key] || []);\n        var notInArgs = keyAndAliases.every(function (val) {\n          return args.indexOf(\"--\".concat(val)) === -1;\n        });\n\n        if (notInArgs) {\n          if (!zshShell) {\n            completions.push(\"--\".concat(key));\n          } else {\n            var desc = descs[key] || '';\n            completions.push(\"--\".concat(key.replace(/:/g, '\\\\:'), \":\").concat(desc.replace('__yargsString__:', '')));\n          }\n        }\n      });\n    }\n\n    done(completions);\n  }; // generate the completion script to add to your .bashrc.\n\n\n  self.generateCompletionScript = function generateCompletionScript($0, cmd) {\n    var templates = require('./completion-templates');\n\n    var script = zshShell ? templates.completionZshTemplate : templates.completionShTemplate;\n    var name = path.basename($0); // add ./to applications not yet installed as bin.\n\n    if ($0.match(/\\.js$/)) $0 = \"./\".concat($0);\n    script = script.replace(/{{app_name}}/g, name);\n    script = script.replace(/{{completion_command}}/g, cmd);\n    return script.replace(/{{app_path}}/g, $0);\n  }; // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n\n\n  var completionFunction = null;\n\n  self.registerFunction = function (fn) {\n    completionFunction = fn;\n  };\n\n  return self;\n};","map":{"version":3,"sources":["/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/yargs/lib/completion.js"],"names":["path","require","module","exports","completion","yargs","usage","command","self","completionKey","zshShell","process","env","SHELL","indexOf","getCompletion","args","done","completions","current","length","argv","parse","aliases","parsed","parentCommands","getContext","commands","completionFunction","result","then","list","nextTick","catch","err","handlers","getCommandHandlers","i","ii","builder","y","reset","match","getCommands","forEach","usageCommand","commandName","parseCommand","cmd","push","desc","replace","descs","getDescriptions","Object","keys","getOptions","key","keyAndAliases","concat","notInArgs","every","val","generateCompletionScript","$0","templates","script","completionZshTemplate","completionShTemplate","name","basename","registerFunction","fn"],"mappings":"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","sourcesContent":["'use strict'\nconst path = require('path')\n\n// add bash completions to your\n//  yargs-powered applications.\nmodule.exports = function completion (yargs, usage, command) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  }\n\n  const zshShell = process.env.SHELL && process.env.SHELL.indexOf('zsh') !== -1\n  // get a list of completion commands.\n  // 'args' is the array of strings from the line to be completed\n  self.getCompletion = function getCompletion (args, done) {\n    const completions = []\n    const current = args.length ? args[args.length - 1] : ''\n    const argv = yargs.parse(args, true)\n    const aliases = yargs.parsed.aliases\n    const parentCommands = yargs.getContext().commands\n\n    // a custom completion function can be provided\n    // to completion().\n    if (completionFunction) {\n      if (completionFunction.length < 3) {\n        const result = completionFunction(current, argv)\n\n        // promise based completion function.\n        if (typeof result.then === 'function') {\n          return result.then((list) => {\n            process.nextTick(() => { done(list) })\n          }).catch((err) => {\n            process.nextTick(() => { throw err })\n          })\n        }\n\n        // synchronous completion function.\n        return done(result)\n      } else {\n        // asynchronous completion function\n        return completionFunction(current, argv, (completions) => {\n          done(completions)\n        })\n      }\n    }\n\n    const handlers = command.getCommandHandlers()\n    for (let i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        const builder = handlers[args[i]].builder\n        if (typeof builder === 'function') {\n          const y = yargs.reset()\n          builder(y)\n          return y.argv\n        }\n      }\n    }\n\n    if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current) {\n      usage.getCommands().forEach((usageCommand) => {\n        const commandName = command.parseCommand(usageCommand[0]).cmd\n        if (args.indexOf(commandName) === -1) {\n          if (!zshShell) {\n            completions.push(commandName)\n          } else {\n            const desc = usageCommand[1] || ''\n            completions.push(commandName.replace(/:/g, '\\\\:') + ':' + desc)\n          }\n        }\n      })\n    }\n\n    if (current.match(/^-/) || (current === '' && completions.length === 0)) {\n      const descs = usage.getDescriptions()\n      Object.keys(yargs.getOptions().key).forEach((key) => {\n        // If the key and its aliases aren't in 'args', add the key to 'completions'\n        const keyAndAliases = [key].concat(aliases[key] || [])\n        const notInArgs = keyAndAliases.every(val => args.indexOf(`--${val}`) === -1)\n        if (notInArgs) {\n          if (!zshShell) {\n            completions.push(`--${key}`)\n          } else {\n            const desc = descs[key] || ''\n            completions.push(`--${key.replace(/:/g, '\\\\:')}:${desc.replace('__yargsString__:', '')}`)\n          }\n        }\n      })\n    }\n\n    done(completions)\n  }\n\n  // generate the completion script to add to your .bashrc.\n  self.generateCompletionScript = function generateCompletionScript ($0, cmd) {\n    const templates = require('./completion-templates')\n    let script = zshShell ? templates.completionZshTemplate : templates.completionShTemplate\n    const name = path.basename($0)\n\n    // add ./to applications not yet installed as bin.\n    if ($0.match(/\\.js$/)) $0 = `./${$0}`\n\n    script = script.replace(/{{app_name}}/g, name)\n    script = script.replace(/{{completion_command}}/g, cmd)\n    return script.replace(/{{app_path}}/g, $0)\n  }\n\n  // register a function to perform your own custom\n  // completions., this function can be either\n  // synchrnous or asynchronous.\n  let completionFunction = null\n  self.registerFunction = (fn) => {\n    completionFunction = fn\n  }\n\n  return self\n}\n"]},"metadata":{},"sourceType":"script"}