{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar locatePath = require('locate-path');\n\nmodule.exports = function (filename) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var startDir = path.resolve(opts.cwd || '');\n\n  var _path$parse = path.parse(startDir),\n      root = _path$parse.root;\n\n  var filenames = [].concat(filename);\n  return new Promise(function (resolve) {\n    (function find(dir) {\n      locatePath(filenames, {\n        cwd: dir\n      }).then(function (file) {\n        if (file) {\n          resolve(path.join(dir, file));\n        } else if (dir === root) {\n          resolve(null);\n        } else {\n          find(path.dirname(dir));\n        }\n      });\n    })(startDir);\n  });\n};\n\nmodule.exports.sync = function (filename) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var dir = path.resolve(opts.cwd || '');\n\n  var _path$parse2 = path.parse(dir),\n      root = _path$parse2.root;\n\n  var filenames = [].concat(filename); // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    var file = locatePath.sync(filenames, {\n      cwd: dir\n    });\n\n    if (file) {\n      return path.join(dir, file);\n    }\n\n    if (dir === root) {\n      return null;\n    }\n\n    dir = path.dirname(dir);\n  }\n};","map":{"version":3,"sources":["/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/find-up/index.js"],"names":["path","require","locatePath","module","exports","filename","opts","startDir","resolve","cwd","parse","root","filenames","concat","Promise","find","dir","then","file","join","dirname","sync"],"mappings":"AAAA;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAACC,QAAD,EAAyB;AAAA,MAAdC,IAAc,uEAAP,EAAO;AACzC,MAAMC,QAAQ,GAAGP,IAAI,CAACQ,OAAL,CAAaF,IAAI,CAACG,GAAL,IAAY,EAAzB,CAAjB;;AADyC,oBAE1BT,IAAI,CAACU,KAAL,CAAWH,QAAX,CAF0B;AAAA,MAElCI,IAFkC,eAElCA,IAFkC;;AAIzC,MAAMC,SAAS,GAAG,GAAGC,MAAH,CAAUR,QAAV,CAAlB;AAEA,SAAO,IAAIS,OAAJ,CAAY,UAAAN,OAAO,EAAI;AAC7B,KAAC,SAASO,IAAT,CAAcC,GAAd,EAAmB;AACnBd,MAAAA,UAAU,CAACU,SAAD,EAAY;AAACH,QAAAA,GAAG,EAAEO;AAAN,OAAZ,CAAV,CAAkCC,IAAlC,CAAuC,UAAAC,IAAI,EAAI;AAC9C,YAAIA,IAAJ,EAAU;AACTV,UAAAA,OAAO,CAACR,IAAI,CAACmB,IAAL,CAAUH,GAAV,EAAeE,IAAf,CAAD,CAAP;AACA,SAFD,MAEO,IAAIF,GAAG,KAAKL,IAAZ,EAAkB;AACxBH,UAAAA,OAAO,CAAC,IAAD,CAAP;AACA,SAFM,MAEA;AACNO,UAAAA,IAAI,CAACf,IAAI,CAACoB,OAAL,CAAaJ,GAAb,CAAD,CAAJ;AACA;AACD,OARD;AASA,KAVD,EAUGT,QAVH;AAWA,GAZM,CAAP;AAaA,CAnBD;;AAqBAJ,MAAM,CAACC,OAAP,CAAeiB,IAAf,GAAsB,UAAChB,QAAD,EAAyB;AAAA,MAAdC,IAAc,uEAAP,EAAO;AAC9C,MAAIU,GAAG,GAAGhB,IAAI,CAACQ,OAAL,CAAaF,IAAI,CAACG,GAAL,IAAY,EAAzB,CAAV;;AAD8C,qBAE/BT,IAAI,CAACU,KAAL,CAAWM,GAAX,CAF+B;AAAA,MAEvCL,IAFuC,gBAEvCA,IAFuC;;AAI9C,MAAMC,SAAS,GAAG,GAAGC,MAAH,CAAUR,QAAV,CAAlB,CAJ8C,CAM9C;;AACA,SAAO,IAAP,EAAa;AACZ,QAAMa,IAAI,GAAGhB,UAAU,CAACmB,IAAX,CAAgBT,SAAhB,EAA2B;AAACH,MAAAA,GAAG,EAAEO;AAAN,KAA3B,CAAb;;AAEA,QAAIE,IAAJ,EAAU;AACT,aAAOlB,IAAI,CAACmB,IAAL,CAAUH,GAAV,EAAeE,IAAf,CAAP;AACA;;AAED,QAAIF,GAAG,KAAKL,IAAZ,EAAkB;AACjB,aAAO,IAAP;AACA;;AAEDK,IAAAA,GAAG,GAAGhB,IAAI,CAACoB,OAAL,CAAaJ,GAAb,CAAN;AACA;AACD,CApBD","sourcesContent":["'use strict';\nconst path = require('path');\nconst locatePath = require('locate-path');\n\nmodule.exports = (filename, opts = {}) => {\n\tconst startDir = path.resolve(opts.cwd || '');\n\tconst {root} = path.parse(startDir);\n\n\tconst filenames = [].concat(filename);\n\n\treturn new Promise(resolve => {\n\t\t(function find(dir) {\n\t\t\tlocatePath(filenames, {cwd: dir}).then(file => {\n\t\t\t\tif (file) {\n\t\t\t\t\tresolve(path.join(dir, file));\n\t\t\t\t} else if (dir === root) {\n\t\t\t\t\tresolve(null);\n\t\t\t\t} else {\n\t\t\t\t\tfind(path.dirname(dir));\n\t\t\t\t}\n\t\t\t});\n\t\t})(startDir);\n\t});\n};\n\nmodule.exports.sync = (filename, opts = {}) => {\n\tlet dir = path.resolve(opts.cwd || '');\n\tconst {root} = path.parse(dir);\n\n\tconst filenames = [].concat(filename);\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\tconst file = locatePath.sync(filenames, {cwd: dir});\n\n\t\tif (file) {\n\t\t\treturn path.join(dir, file);\n\t\t}\n\n\t\tif (dir === root) {\n\t\t\treturn null;\n\t\t}\n\n\t\tdir = path.dirname(dir);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}