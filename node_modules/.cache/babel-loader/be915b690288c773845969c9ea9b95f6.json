{"ast":null,"code":"'use strict';\n\nvar pTry = require('p-try');\n\nvar pLimit = function pLimit(concurrency) {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    return Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));\n  }\n\n  var queue = [];\n  var activeCount = 0;\n\n  var next = function next() {\n    activeCount--;\n\n    if (queue.length > 0) {\n      queue.shift()();\n    }\n  };\n\n  var run = function run(fn, resolve) {\n    activeCount++;\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    var result = pTry.apply(void 0, [fn].concat(args));\n    resolve(result);\n    result.then(next, next);\n  };\n\n  var enqueue = function enqueue(fn, resolve) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    if (activeCount < concurrency) {\n      run.apply(void 0, [fn, resolve].concat(args));\n    } else {\n      queue.push(run.bind.apply(run, [null, fn, resolve].concat(args)));\n    }\n  };\n\n  var generator = function generator(fn) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return new Promise(function (resolve) {\n      return enqueue.apply(void 0, [fn, resolve].concat(args));\n    });\n  };\n\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: function get() {\n        return activeCount;\n      }\n    },\n    pendingCount: {\n      get: function get() {\n        return queue.length;\n      }\n    },\n    clearQueue: {\n      value: function value() {\n        queue.length = 0;\n      }\n    }\n  });\n  return generator;\n};\n\nmodule.exports = pLimit;\nmodule.exports.default = pLimit;","map":{"version":3,"sources":["/Users/krunalmehta/React Proj/netflixclonebykrun/netflixclone/node_modules/p-limit/index.js"],"names":["pTry","require","pLimit","concurrency","Number","isInteger","Infinity","Promise","reject","TypeError","queue","activeCount","next","length","shift","run","fn","resolve","args","result","then","enqueue","push","bind","generator","Object","defineProperties","get","pendingCount","clearQueue","value","module","exports","default"],"mappings":"AAAA;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,WAAW,EAAI;AAC7B,MAAI,EAAE,CAACC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,KAAiCA,WAAW,KAAKG,QAAlD,KAA+DH,WAAW,GAAG,CAA/E,CAAJ,EAAuF;AACtF,WAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,SAAJ,CAAc,qDAAd,CAAf,CAAP;AACA;;AAED,MAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,CAAlB;;AAEA,MAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAClBD,IAAAA,WAAW;;AAEX,QAAID,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACrBH,MAAAA,KAAK,CAACI,KAAN;AACA;AACD,GAND;;AAQA,MAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,EAAD,EAAKC,OAAL,EAA0B;AACrCN,IAAAA,WAAW;;AAD0B,sCAATO,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAGrC,QAAMC,MAAM,GAAGnB,IAAI,MAAJ,UAAKgB,EAAL,SAAYE,IAAZ,EAAf;AAEAD,IAAAA,OAAO,CAACE,MAAD,CAAP;AAEAA,IAAAA,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkBA,IAAlB;AACA,GARD;;AAUA,MAAMS,OAAO,GAAG,SAAVA,OAAU,CAACL,EAAD,EAAKC,OAAL,EAA0B;AAAA,uCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AACzC,QAAIP,WAAW,GAAGR,WAAlB,EAA+B;AAC9BY,MAAAA,GAAG,MAAH,UAAIC,EAAJ,EAAQC,OAAR,SAAoBC,IAApB;AACA,KAFD,MAEO;AACNR,MAAAA,KAAK,CAACY,IAAN,CAAWP,GAAG,CAACQ,IAAJ,OAAAR,GAAG,GAAM,IAAN,EAAYC,EAAZ,EAAgBC,OAAhB,SAA4BC,IAA5B,EAAd;AACA;AACD,GAND;;AAQA,MAAMM,SAAS,GAAG,SAAZA,SAAY,CAACR,EAAD;AAAA,uCAAQE,IAAR;AAAQA,MAAAA,IAAR;AAAA;;AAAA,WAAiB,IAAIX,OAAJ,CAAY,UAAAU,OAAO;AAAA,aAAII,OAAO,MAAP,UAAQL,EAAR,EAAYC,OAAZ,SAAwBC,IAAxB,EAAJ;AAAA,KAAnB,CAAjB;AAAA,GAAlB;;AACAO,EAAAA,MAAM,CAACC,gBAAP,CAAwBF,SAAxB,EAAmC;AAClCb,IAAAA,WAAW,EAAE;AACZgB,MAAAA,GAAG,EAAE;AAAA,eAAMhB,WAAN;AAAA;AADO,KADqB;AAIlCiB,IAAAA,YAAY,EAAE;AACbD,MAAAA,GAAG,EAAE;AAAA,eAAMjB,KAAK,CAACG,MAAZ;AAAA;AADQ,KAJoB;AAOlCgB,IAAAA,UAAU,EAAE;AACXC,MAAAA,KAAK,EAAE,iBAAM;AACZpB,QAAAA,KAAK,CAACG,MAAN,GAAe,CAAf;AACA;AAHU;AAPsB,GAAnC;AAcA,SAAOW,SAAP;AACA,CAlDD;;AAoDAO,MAAM,CAACC,OAAP,GAAiB9B,MAAjB;AACA6B,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyB/B,MAAzB","sourcesContent":["'use strict';\nconst pTry = require('p-try');\n\nconst pLimit = concurrency => {\n\tif (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n\t\treturn Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));\n\t}\n\n\tconst queue = [];\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.length > 0) {\n\t\t\tqueue.shift()();\n\t\t}\n\t};\n\n\tconst run = (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = pTry(fn, ...args);\n\n\t\tresolve(result);\n\n\t\tresult.then(next, next);\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tif (activeCount < concurrency) {\n\t\t\trun(fn, resolve, ...args);\n\t\t} else {\n\t\t\tqueue.push(run.bind(null, fn, resolve, ...args));\n\t\t}\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.length\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.length = 0;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\nmodule.exports.default = pLimit;\n"]},"metadata":{},"sourceType":"script"}